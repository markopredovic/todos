{"version":3,"sources":["context/TodosContext.js","components/AddTodoForm.js","components/Todo.js","components/TodoList.js","reducers/todosReducer.js","types.js","App.js","serviceWorker.js","index.js"],"names":["createContext","todos","addTodo","removeTodo","toggleTodo","AddTodoForm","addTodoRef","useRef","context","useContext","todosContext","react_default","a","createElement","onSubmit","e","preventDefault","console","log","current","value","todo","id","Date","now","name","isCompleted","type","placeholder","ref","Todo","_ref","parentId","onClick","style","textDecoration","marginLeft","TodoList","TodosContext","map","components_Todo","Object","assign","key","todosReducer","state","action","objectSpread","concat","toConsumableArray","payload","currentTodos","index","findIndex","splice","toggleTodos","App","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","useEffect","axios","get","then","response","data","result","_todo","push","Provider","post","delete","patch","className","components_AddTodoForm","components_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0f81b052.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport default createContext({\n    todos: [],\n    addTodo: () => {},\n    removeTodo: () => {},\n    toggleTodo: () => {}\n})","import React, { useRef, useContext } from 'react';\nimport todosContext from '../context/TodosContext';\n\nconst AddTodoForm = () => {\n\n    const addTodoRef = useRef(null)\n\n    const context = useContext(todosContext);\n\n\n    const onFormSubmitHandler = (e) => {\n        e.preventDefault();\n\n        console.log(addTodoRef.current.value)\n\n        const todo = {\n            id: Date.now(),\n            name: addTodoRef.current.value,\n            isCompleted: false\n        }\n\n        context.addTodo(todo);\n\n        addTodoRef.current.value = null;\n    }\n\n    return(\n        <form onSubmit={onFormSubmitHandler}>\n            <input type=\"text\" placeholder=\"add todo...\" ref={addTodoRef} />\n            <button type=\"submit\">add todo</button>\n        </form>\n    )\n}\n\nexport default AddTodoForm;","import React, { useContext } from 'react';\nimport todosContext from '../context/TodosContext'\n\n\nconst Todo = ({id, name, isCompleted, parentId}) => {\n\n    const context = useContext(todosContext)\n\n    return(\n        <div>\n            <span onClick={() => context.toggleTodo({id, name, isCompleted: !isCompleted, parentId})} style={{textDecoration: isCompleted ? 'line-through' : 'inherit'}}>{name}</span>\n            <button onClick={() => context.removeTodo(parentId)} style={{marginLeft: '10px'}}>x</button>\n        </div>\n    )\n}\n\nexport default Todo;","import React, { useContext } from 'react';\nimport TodosContext from '../context/TodosContext'\nimport Todo from './Todo'\n\nconst TodoList = () => {\n\n    const context = useContext(TodosContext);\n\n    let todos = 'Loading...';\n\n    if(context.todos) {\n        todos = context.todos.map(todo => <Todo key={todo.parentId} {...todo}/>);\n    }\n\n    return(\n        <div>{todos}</div>\n    )\n}\n\nexport default TodoList;","import { ADD_TODO, REMOVE_TODO, TOGGLE_TODO, GET_LIST } from '../types';\n\n\nexport default (state, action) => {\n    switch(action.type) {\n        case ADD_TODO:\n            return {\n                ...state,\n                todos: [...state.todos, action.payload]\n            }\n        case REMOVE_TODO:\n            return removeTodo(state, action.payload)\n        case TOGGLE_TODO:\n            return toggleTodo(state, action.payload)\n        case GET_LIST:\n            return {\n                ...state,\n                todos: action.payload\n            }\n        default: \n            return state;\n    }\n}\n\nconst removeTodo = (state, parentId) => {\n    let currentTodos = [...state.todos];\n    const index = currentTodos.findIndex(todo => todo.parentId === parentId);\n    currentTodos.splice(index, 1);\n\n    return {\n        ...state,\n        todos: currentTodos\n    }\n}\n\nconst toggleTodo = (state, todo) => {\n    const toggleTodos = [...state.todos].map(current => current.id === todo.id ? {id: current.id, name: current.name, isCompleted: todo.isCompleted, parentId: current.parentId} : current);\n    \n    return {\n        ...state,\n        todos: toggleTodos\n    }\n}\n\n","const ADD_TODO = 'ADD_TODO';\nconst REMOVE_TODO = 'REMOVE_TODO';\nconst TOGGLE_TODO = 'TOGGLE_TODO';\nconst GET_LIST = 'GET_LIST';\n\n\nexport { ADD_TODO, REMOVE_TODO, TOGGLE_TODO, GET_LIST };","import React, { useEffect, useReducer } from \"react\";\nimport \"./App.css\";\nimport AddTodoForm from \"./components/AddTodoForm\";\nimport TodoList from \"./components/TodoList\";\nimport TodosContext from \"./context/TodosContext\";\nimport todosReducer from \"./reducers/todosReducer\";\nimport { ADD_TODO, REMOVE_TODO, TOGGLE_TODO, GET_LIST } from \"./types\";\nimport axios from \"axios\";\n\nconst App = () => {\n  const initialState = {\n    todos: [{ id: 1, name: \"REact learning\", isCompleted: false }]\n  };\n\n  const [state, dispatch] = useReducer(todosReducer, initialState);\n\n  useEffect(() => {\n    axios\n      .get(\"https://react-proba.firebaseio.com/todos.json\")\n      .then(response => response.data)\n      .then(todos => {\n        let result = [];\n\n        for (const todo in todos) {\n          let _todo = todos[todo];\n          _todo.parentId = todo;\n          result.push(_todo);\n        }\n\n        dispatch({\n          type: GET_LIST,\n          payload: result\n        })\n      });\n  }, []);\n\n  const addTodo = todo => {\n    // also add to firebase\n    axios\n      .post(\"https://react-proba.firebaseio.com/todos.json\", {\n        id: todo.id,\n        name: todo.name,\n        isCompleted: false\n      })\n      .then(response => response.data)\n      .then(data => {\n        todo.parentId =  data.name;\n        dispatch({\n          type: ADD_TODO,\n          payload: todo\n        });\n      })\n  };\n  const removeTodo = parentId => {\n\n    axios.delete(`https://react-proba.firebaseio.com/todos/${parentId}.json`)\n      .then(() => {\n        dispatch({\n          type: REMOVE_TODO,\n          payload: parentId\n        });\n      })\n  };\n\n  const toggleTodo = todo => {\n\n    axios.patch(`https://react-proba.firebaseio.com/todos/${todo.parentId}.json`, {isCompleted: todo.isCompleted})\n      .then(() => {\n        dispatch({\n          type: TOGGLE_TODO,\n          payload: todo\n        });\n      })\n\n\n\n\n  };\n\n  return (\n    <TodosContext.Provider\n      value={{ todos: state.todos, addTodo, removeTodo, toggleTodo }}\n    >\n      <div className=\"App\">\n        <h1>Todo list</h1>\n        <AddTodoForm />\n        <TodoList />\n      </div>\n    </TodosContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}